/*************************************************************************
 * Fronttest.cpp script can be used to apply gains and Enegy & Position  *
 * calibration parameters and see if everything done prior is not correct*
 *                                                                       *
 * Event by event pedestal substraction is done and gains generated by   *
 * Gainmatch.cpp for different strips are applied. Energy calibration    *
 * parameter are applied from SX3EnCal.dat for front & SX3SectorEncal.dat* 
 * for back side. Position calibration is also applied from SX3PosCal.dat*									 
 * histogram. Energy vs Position and Front energy vs Back energy         *
 * histograms are created				                 *
 * 			                				 *									 
 * Test.root file (FvB energy) and Fronttest.root file (EvP) are created *
 * inside the Output directory  					 *
 *************************************************************************/


#define Analysis_cxx

#include "Analysis.h"

#include <string>
#include <fstream>

TChain* MakeChain();

int main() {
    TChain *chain = MakeChain();

    Analysis t(chain);
    t.Loop();
}

TChain* MakeChain() {
    auto *chain = new TChain("data");
    TString PathToFiles = "/mnt/e/goddessSort-master/Output/Run";

    chain->Add(PathToFiles + "0446.root"); //SX3 upstream 0-3
    //chain->Add(PathToFiles + "0448.root"); //SX3 upstream 2-4 (detector 5 is empty. I am calibrating #4 with this file)
    //chain->Add(PathToFiles + "0449.root"); // SX3 upstream 6-8
    //chain->Add(PathToFiles + "0447.root"); //SX3 upstream 8-10 (I am calibrating #9 and #10 with this file. Also, 11 is empty)

    return chain;
}

void Analysis::Loop() {
    if (fChain == 0) return;

    Long64_t nentries = fChain->GetEntriesFast();

    TString CutPath = "/mnt/e/Goddess/Cut/";
    TString CutPrefix = "cut_p30dp";

    int prevRunNumber = -1;

	//Open the front pedestals File 
	std::ifstream file;
	file.open("SX3pedestals.dat");
	Double_t Pedestals[12][8] = {0};
	for (Int_t i = 0; i<12;i++){
		for (Int_t k=0; k<8; k++){
			file >> Pedestals[i][k];	
			//std::cout << Pedestals[10][6];
		}
	}

	
	//Open the back pedestals File 
	std::ifstream file1;
	file1.open("Sectorpedestals.dat");
	Double_t SectorPedestals[192] = {0};
	for (Int_t i = 0; i<192;i++){
		file1 >> SectorPedestals[i];
		//std::cout << SectorPedestals[i] << std::endl;	
	}
 
	//Open the gains file
	std::ifstream gainfile;
	gainfile.open("/mnt/e/Analysis/SX3 Calibration/SX3gains.dat");
	Double_t Gains[48] = {0}; 
	for (Int_t i=0; i<48; i++){
			gainfile >>Gains[i];
			//std::cout << Gains[2] << std::endl;
	}



	//Open the Energy Calibration file for front side of Upstream SX3 
	std::ifstream SX3EnCalfile;
	SX3EnCalfile.open("/mnt/e/Analysis/SX3 Calibration/SX3EnCal.dat");
	Double_t SX3EnCalSlope[192] = {0};
	Double_t SX3EnCalIntercept[192] = {0}; 
	for (Int_t i=0; i<192; i++){
			SX3EnCalfile >> SX3EnCalSlope[i] >> SX3EnCalIntercept[i];
	}

	//Open the Energy Calibration file for back side of Upstream SX3 
	std::ifstream SX3SectorEnCalfile;
	SX3SectorEnCalfile.open("/mnt/e/Analysis/SX3 Calibration/SX3SectorEnCal.dat");
	Double_t SX3SectorEnCalSlope[192] = {0};
	Double_t SX3SectorEnCalIntercept[192] = {0}; 
	for (Int_t i=0; i<192; i++){
			SX3SectorEnCalfile >> SX3SectorEnCalSlope[i] >> SX3SectorEnCalIntercept[i];
			//std::cout << SX3SectorEnCalSlope[i] << '\t' << SX3SectorEnCalIntercept[i] << std::endl;
	}


	//Open the Position Calibration file for Upstream SX3
	std::ifstream SX3PosCalfile;
	SX3PosCalfile.open("/mnt/e/Analysis/SX3 Calibration/SX3PosCalinfo.dat");
	Double_t xone[48] = {0};
	Double_t xtwo[48] = {0}; 
	for (Int_t i=0; i<48; i++){
			SX3PosCalfile >> xone[i] >> xtwo[i];
	}


	//Define Histograms here
	//Defining histograms detector by detector
	TH2F *SX3_EvP[12][4]; //Energy vs Position Histograms for 12 upstream SX3 Detectors
 	for (int i=0; i<12; i++){ //Loop over all detectors
		for (int j=0; j<4; j++){ //Loop over Strips
			std::string nameSX3_EvP = Form("SX3u%i_Strip%i_EvP",i,j);
			SX3_EvP[i][k] = new TH2F(nameSX3_EvP.c_str(), "SX3 upstream Energy vs Position",1000,-10,100,1000,0,12000);
		} //End of loop over detectors
	}//End of loop over strips
	

	TH2F *SX3FvB = new TH2F("SX3FvB", "SX3 Front vs Back Energy",1000,0,12000,1000,0,12000); //Front vs Back calibrated energy histogram is created. This should give x=y line
	//Create Output File   
	TFile* outputFile = new TFile("/mnt/e/Analysis/SX3 Calibration/Output/Fronttest.root", "recreate");
	TFile* outputFile2 = new TFile("/mnt/e/Analysis/SX3 Calibration/Output/Test.root", "recreate");
	


    Long64_t nbytes = 0, nb = 0;
    for (Long64_t jentry=0; jentry<nentries;jentry++) {
        Long64_t ientry = LoadTree(jentry);
        if (ientry < 0) break;
        nb = fChain->GetEntry(jentry);   nbytes += nb;
	
		//Loop over the Multiplicity
		for(Int_t j=0; j<SX3Mul; j++){


			//Pedestals Substracted
			Float_t SX3RawStripRight = SX3StripRightADC[j] - Pedestals[SX3Det[j]][SX3Strip[j]*2];
			Float_t SX3RawStripLeft = SX3StripLeftADC[j] - Pedestals[SX3Det[j]][SX3Strip[j]*2+1];
			Float_t SX3RawSector = SX3SectorADC[j] - SectorPedestals[(SX3Det[j]*16) + (SX3Strip[j]*4) + (SX3Sector[j])];
			
			//Gains applied
			Float_t RawStripLeft = SX3RawStripLeft; 
			Float_t RawStripRight = -1. * SX3RawStripRight * (Gains[(SX3Det[j]*4)+(SX3Strip[j])]);  
		
			//Energy and Position Calculations			
			Float_t RawEnergy = RawStripRight + RawStripLeft; //Gain Matched Energy (No Calibration though)
			Float_t Energy = RawEnergy * SX3EnCalSlope[(SX3Det[j]*16)+(SX3Strip[j]*4)+(SX3Sector[j])] + SX3EnCalIntercept[(SX3Det[j]*16)+(SX3Strip[j]*4)+(SX3Sector[j])]; //Energy Calibrated
			Float_t RawPosition = ((RawStripRight - RawStripLeft) / Energy ); // Gain matched Position( Energy has been Calibrated but No Calibration in Position)
			Float_t Position =((RawPosition - xone[(SX3Det[j]*4)+(SX3Strip[j])]) / (xtwo[(SX3Det[j]*4)+(SX3Strip[j])]- xone[(SX3Det[j]*4)+(SX3Strip[j])])) *75.; //Position Calibration applied

			//Back side Calibration
			Float_t SectorEnergy = (SX3RawSector * SX3SectorEnCalSlope[(SX3Det[j]*16)+(SX3Strip[j]*4)+(SX3Sector[j])]) + SX3SectorEnCalIntercept[(SX3Det[j]*16)+(SX3Strip[j]*4)+(SX3Sector[j])];
			//std::cout << RawPosition << '\t' << Position << std::endl;
		
			//Fill your histograms here
			if (SX3Upstream[j])SX3_EvP[SX3Det[j]][SX3Strip[j]]->Fill(Position,SectorEnergy);
			if (SX3Upstream[j] && SX3Det[j]==0)SX3FvB->Fill(Energy,SectorEnergy);
			
			


			
		}//End of Loop Over Multiplicity	
    }// End of event by event analysis
  
    
    outputFile->cd();

    
    //Writing Histograms Detector by Detector
    for (Int_t i=0; i<12; i++){
	for (Int_t k=0; k<4; k++)
		SX3_EvP[i][k]->Write();
    }
    outputFile->Close();

    outputFile2->cd();
    SX3FvB->Write();


}








